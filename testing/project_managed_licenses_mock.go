// Code generated by MockGen. DO NOT EDIT.
// Source: gitlab.com/gitlab-org/api/client-go (interfaces: ManagedLicensesServiceInterface)
//
// Generated by this command:
//
//	mockgen -typed -destination=project_managed_licenses_mock.go -package=testing gitlab.com/gitlab-org/api/client-go ManagedLicensesServiceInterface
//

// Package testing is a generated GoMock package.
package testing

import (
	reflect "reflect"

	gitlab "gitlab.com/gitlab-org/api/client-go"
	gomock "go.uber.org/mock/gomock"
)

// MockManagedLicensesServiceInterface is a mock of ManagedLicensesServiceInterface interface.
type MockManagedLicensesServiceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockManagedLicensesServiceInterfaceMockRecorder
	isgomock struct{}
}

// MockManagedLicensesServiceInterfaceMockRecorder is the mock recorder for MockManagedLicensesServiceInterface.
type MockManagedLicensesServiceInterfaceMockRecorder struct {
	mock *MockManagedLicensesServiceInterface
}

// NewMockManagedLicensesServiceInterface creates a new mock instance.
func NewMockManagedLicensesServiceInterface(ctrl *gomock.Controller) *MockManagedLicensesServiceInterface {
	mock := &MockManagedLicensesServiceInterface{ctrl: ctrl}
	mock.recorder = &MockManagedLicensesServiceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockManagedLicensesServiceInterface) EXPECT() *MockManagedLicensesServiceInterfaceMockRecorder {
	return m.recorder
}

// AddManagedLicense mocks base method.
func (m *MockManagedLicensesServiceInterface) AddManagedLicense(pid any, opt *gitlab.AddManagedLicenseOptions, options ...gitlab.RequestOptionFunc) (*gitlab.ManagedLicense, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddManagedLicense", varargs...)
	ret0, _ := ret[0].(*gitlab.ManagedLicense)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// AddManagedLicense indicates an expected call of AddManagedLicense.
func (mr *MockManagedLicensesServiceInterfaceMockRecorder) AddManagedLicense(pid, opt any, options ...any) *MockManagedLicensesServiceInterfaceAddManagedLicenseCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, opt}, options...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddManagedLicense", reflect.TypeOf((*MockManagedLicensesServiceInterface)(nil).AddManagedLicense), varargs...)
	return &MockManagedLicensesServiceInterfaceAddManagedLicenseCall{Call: call}
}

// MockManagedLicensesServiceInterfaceAddManagedLicenseCall wrap *gomock.Call
type MockManagedLicensesServiceInterfaceAddManagedLicenseCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockManagedLicensesServiceInterfaceAddManagedLicenseCall) Return(arg0 *gitlab.ManagedLicense, arg1 *gitlab.Response, arg2 error) *MockManagedLicensesServiceInterfaceAddManagedLicenseCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockManagedLicensesServiceInterfaceAddManagedLicenseCall) Do(f func(any, *gitlab.AddManagedLicenseOptions, ...gitlab.RequestOptionFunc) (*gitlab.ManagedLicense, *gitlab.Response, error)) *MockManagedLicensesServiceInterfaceAddManagedLicenseCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockManagedLicensesServiceInterfaceAddManagedLicenseCall) DoAndReturn(f func(any, *gitlab.AddManagedLicenseOptions, ...gitlab.RequestOptionFunc) (*gitlab.ManagedLicense, *gitlab.Response, error)) *MockManagedLicensesServiceInterfaceAddManagedLicenseCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeleteManagedLicense mocks base method.
func (m *MockManagedLicensesServiceInterface) DeleteManagedLicense(pid, mlid any, options ...gitlab.RequestOptionFunc) (*gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, mlid}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteManagedLicense", varargs...)
	ret0, _ := ret[0].(*gitlab.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteManagedLicense indicates an expected call of DeleteManagedLicense.
func (mr *MockManagedLicensesServiceInterfaceMockRecorder) DeleteManagedLicense(pid, mlid any, options ...any) *MockManagedLicensesServiceInterfaceDeleteManagedLicenseCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, mlid}, options...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteManagedLicense", reflect.TypeOf((*MockManagedLicensesServiceInterface)(nil).DeleteManagedLicense), varargs...)
	return &MockManagedLicensesServiceInterfaceDeleteManagedLicenseCall{Call: call}
}

// MockManagedLicensesServiceInterfaceDeleteManagedLicenseCall wrap *gomock.Call
type MockManagedLicensesServiceInterfaceDeleteManagedLicenseCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockManagedLicensesServiceInterfaceDeleteManagedLicenseCall) Return(arg0 *gitlab.Response, arg1 error) *MockManagedLicensesServiceInterfaceDeleteManagedLicenseCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockManagedLicensesServiceInterfaceDeleteManagedLicenseCall) Do(f func(any, any, ...gitlab.RequestOptionFunc) (*gitlab.Response, error)) *MockManagedLicensesServiceInterfaceDeleteManagedLicenseCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockManagedLicensesServiceInterfaceDeleteManagedLicenseCall) DoAndReturn(f func(any, any, ...gitlab.RequestOptionFunc) (*gitlab.Response, error)) *MockManagedLicensesServiceInterfaceDeleteManagedLicenseCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// EditManagedLicense mocks base method.
func (m *MockManagedLicensesServiceInterface) EditManagedLicense(pid, mlid any, opt *gitlab.EditManagedLicenceOptions, options ...gitlab.RequestOptionFunc) (*gitlab.ManagedLicense, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, mlid, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "EditManagedLicense", varargs...)
	ret0, _ := ret[0].(*gitlab.ManagedLicense)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// EditManagedLicense indicates an expected call of EditManagedLicense.
func (mr *MockManagedLicensesServiceInterfaceMockRecorder) EditManagedLicense(pid, mlid, opt any, options ...any) *MockManagedLicensesServiceInterfaceEditManagedLicenseCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, mlid, opt}, options...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditManagedLicense", reflect.TypeOf((*MockManagedLicensesServiceInterface)(nil).EditManagedLicense), varargs...)
	return &MockManagedLicensesServiceInterfaceEditManagedLicenseCall{Call: call}
}

// MockManagedLicensesServiceInterfaceEditManagedLicenseCall wrap *gomock.Call
type MockManagedLicensesServiceInterfaceEditManagedLicenseCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockManagedLicensesServiceInterfaceEditManagedLicenseCall) Return(arg0 *gitlab.ManagedLicense, arg1 *gitlab.Response, arg2 error) *MockManagedLicensesServiceInterfaceEditManagedLicenseCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockManagedLicensesServiceInterfaceEditManagedLicenseCall) Do(f func(any, any, *gitlab.EditManagedLicenceOptions, ...gitlab.RequestOptionFunc) (*gitlab.ManagedLicense, *gitlab.Response, error)) *MockManagedLicensesServiceInterfaceEditManagedLicenseCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockManagedLicensesServiceInterfaceEditManagedLicenseCall) DoAndReturn(f func(any, any, *gitlab.EditManagedLicenceOptions, ...gitlab.RequestOptionFunc) (*gitlab.ManagedLicense, *gitlab.Response, error)) *MockManagedLicensesServiceInterfaceEditManagedLicenseCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetManagedLicense mocks base method.
func (m *MockManagedLicensesServiceInterface) GetManagedLicense(pid, mlid any, options ...gitlab.RequestOptionFunc) (*gitlab.ManagedLicense, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, mlid}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetManagedLicense", varargs...)
	ret0, _ := ret[0].(*gitlab.ManagedLicense)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetManagedLicense indicates an expected call of GetManagedLicense.
func (mr *MockManagedLicensesServiceInterfaceMockRecorder) GetManagedLicense(pid, mlid any, options ...any) *MockManagedLicensesServiceInterfaceGetManagedLicenseCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, mlid}, options...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetManagedLicense", reflect.TypeOf((*MockManagedLicensesServiceInterface)(nil).GetManagedLicense), varargs...)
	return &MockManagedLicensesServiceInterfaceGetManagedLicenseCall{Call: call}
}

// MockManagedLicensesServiceInterfaceGetManagedLicenseCall wrap *gomock.Call
type MockManagedLicensesServiceInterfaceGetManagedLicenseCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockManagedLicensesServiceInterfaceGetManagedLicenseCall) Return(arg0 *gitlab.ManagedLicense, arg1 *gitlab.Response, arg2 error) *MockManagedLicensesServiceInterfaceGetManagedLicenseCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockManagedLicensesServiceInterfaceGetManagedLicenseCall) Do(f func(any, any, ...gitlab.RequestOptionFunc) (*gitlab.ManagedLicense, *gitlab.Response, error)) *MockManagedLicensesServiceInterfaceGetManagedLicenseCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockManagedLicensesServiceInterfaceGetManagedLicenseCall) DoAndReturn(f func(any, any, ...gitlab.RequestOptionFunc) (*gitlab.ManagedLicense, *gitlab.Response, error)) *MockManagedLicensesServiceInterfaceGetManagedLicenseCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListManagedLicenses mocks base method.
func (m *MockManagedLicensesServiceInterface) ListManagedLicenses(pid any, options ...gitlab.RequestOptionFunc) ([]*gitlab.ManagedLicense, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListManagedLicenses", varargs...)
	ret0, _ := ret[0].([]*gitlab.ManagedLicense)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListManagedLicenses indicates an expected call of ListManagedLicenses.
func (mr *MockManagedLicensesServiceInterfaceMockRecorder) ListManagedLicenses(pid any, options ...any) *MockManagedLicensesServiceInterfaceListManagedLicensesCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid}, options...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListManagedLicenses", reflect.TypeOf((*MockManagedLicensesServiceInterface)(nil).ListManagedLicenses), varargs...)
	return &MockManagedLicensesServiceInterfaceListManagedLicensesCall{Call: call}
}

// MockManagedLicensesServiceInterfaceListManagedLicensesCall wrap *gomock.Call
type MockManagedLicensesServiceInterfaceListManagedLicensesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockManagedLicensesServiceInterfaceListManagedLicensesCall) Return(arg0 []*gitlab.ManagedLicense, arg1 *gitlab.Response, arg2 error) *MockManagedLicensesServiceInterfaceListManagedLicensesCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockManagedLicensesServiceInterfaceListManagedLicensesCall) Do(f func(any, ...gitlab.RequestOptionFunc) ([]*gitlab.ManagedLicense, *gitlab.Response, error)) *MockManagedLicensesServiceInterfaceListManagedLicensesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockManagedLicensesServiceInterfaceListManagedLicensesCall) DoAndReturn(f func(any, ...gitlab.RequestOptionFunc) ([]*gitlab.ManagedLicense, *gitlab.Response, error)) *MockManagedLicensesServiceInterfaceListManagedLicensesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
